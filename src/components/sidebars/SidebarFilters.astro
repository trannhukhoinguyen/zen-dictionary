---
export const prerender = false;
import { bodyTypes, fuelTypes, transmission, conditions } from "~/content.config";
import { getPrice, getSchoolSubSchoolSet } from "~/utils/helpers";
import IconReset from "~/assets/images/icons/reset.svg";
import IconChevronDown from "~/assets/images/icons/chevron-down-select.svg";
import IconClose from "~/assets/images/icons/close.svg";

interface Props {
	data: {
		schools: string[];
		colors: string[];
		count: number;
		priceSteps: number[];
	};
}

const allSchoolsSubSchools = await getSchoolSubSchoolSet();
const { data } = Astro.props;
---

<div
	id="sidebar-filter"
	class="fixed lg:relative max-lg:overflow-y-auto shrink-0 inset-y-0 z-50 lg:flex w-full lg:w-80 lg:flex-col max-lg:bg-white transition duration-300 max-lg:opacity-0 max-lg:pointer-events-none"
>
	<div class="flex lg:sticky lg:top-8 flex-col gap-y-5 bg-white lg:shadow-md px-6 py-4 relative">
		<button id="button-modal-filter-close" class="lg:hidden" type="button" aria-label="Close filter modal">
			<div class="flex justify-end">
				<IconClose class="size-8 bg-gray-800 rounded-full p-1 text-white" />
			</div>
		</button>

		<form id="form-filter" method="get" class="grid grid-cols-1 gap-y-6">
			<div>
				<div class="flex items-center gap-x-2">
					<label for="school">School</label>
					<button id="clear-input-school" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<div class="grid grid-cols-1">
					<select name="school" id="school" class="appearance-none col-start-1 row-start-1">
						<option value="all">All</option>
						{allSchoolsSubSchools.map((master) => <option value={master.school}>{master.school}</option>)}
					</select>
					<IconChevronDown class="icon-chevron-down" />
				</div>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="subSchool">SubSchool</label>
					<button id="clear-input-subSchool" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<div class="grid grid-cols-1">
					<select name="subSchool" id="subSchool" class="appearance-none col-start-1 row-start-1">
						<option value="all">All</option>
					</select>
					<IconChevronDown class="icon-chevron-down" />
				</div>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="price">Price</label>
					<button id="clear-input-price" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<div class="grid grid-cols-1">
					<select name="price" id="price" class="appearance-none col-start-1 row-start-1">
						<option value="all">All</option>
						{
							data.priceSteps.map((step, index) => {
								const nextStep = data.priceSteps[index + 1];
								if (index === 0) {
									return <option value={`0-${step}`}>Lower than {getPrice(step)}</option>;
								} else if (nextStep) {
									return (
										<option value={`${step}-${nextStep}`}>
											{getPrice(step)} - {getPrice(nextStep)}
										</option>
									);
								} else {
									return <option value={`${step}-`}>Higher than {getPrice(step)}</option>;
								}
							})
						}
					</select>
					<IconChevronDown class="icon-chevron-down" />
				</div>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="color">Color</label>
					<button id="clear-input-color" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<div class="grid grid-cols-1">
					<select name="color" id="color" class="appearance-none col-start-1 row-start-1">
						<option value="all">All</option>
						{data.colors.map((color) => <option value={color}>{color}</option>)}
					</select>
					<IconChevronDown class="icon-chevron-down" />
				</div>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="bodyType">Body Type</label>
					<button id="clear-input-bodyType" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<div class="grid grid-cols-1">
					<select name="bodyType" id="bodyType" class="appearance-none col-start-1 row-start-1">
						<option value="all">All</option>
						{bodyTypes.map((bodyType) => <option value={bodyType}>{bodyType}</option>)}
					</select>
					<IconChevronDown class="icon-chevron-down" />
				</div>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="fuelType">Fuel Type</label>
					<button id="clear-input-fuelType" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<div class="grid grid-cols-1">
					<select name="fuelType" id="fuelType" class="appearance-none col-start-1 row-start-1">
						<option value="all">All</option>
						{fuelTypes.map((fuelType) => <option value={fuelType}>{fuelType}</option>)}
					</select>
					<IconChevronDown class="icon-chevron-down" />
				</div>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="transmission">Transmission</label>
					<button id="clear-input-transmission" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<div class="grid grid-cols-1">
					<select name="transmission" id="transmission" class="appearance-none col-start-1 row-start-1">
						<option value="all">All</option>
						{transmission.map((transmission) => <option value={transmission}>{transmission}</option>)}
					</select>
					<IconChevronDown class="icon-chevron-down" />
				</div>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="condition">Condition</label>
					<button id="clear-input-condition" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<div class="grid grid-cols-1">
					<select name="condition" id="condition" class="appearance-none col-start-1 row-start-1">
						<option value="all">All</option>
						{conditions.map((condition) => <option value={condition}>{condition}</option>)}
					</select>
					<IconChevronDown class="icon-chevron-down" />
				</div>
			</div>

			<div class="sticky bottom-0">
				<button type="submit" class="button button-yellow w-full">
					Search <span id="filter-result-found" class="ml-1">({data.count})</span></button
				>
			</div>
		</form>
	</div>
</div>

<script>
	document.addEventListener("astro:page-load", async function () {
		const form = document.getElementById("form-filter") as HTMLFormElement;

		if (form) {
			const resultFound = document.getElementById("filter-result-found")!;
			const schoolSelect = form.elements.namedItem("school") as HTMLSelectElement;
			const subSchoolSelect = form.elements.namedItem("subSchool") as HTMLSelectElement;
			const urlParams = new URLSearchParams(window.location.search);

			for (const [key, value] of urlParams.entries()) {
				const input = form.elements.namedItem(key) as HTMLSelectElement;
				const clearButton = document.getElementById(`clear-input-${key}`)! as HTMLButtonElement;

				if (input) {
					input.value = value;
					if (value !== "all" && clearButton) {
						clearButton.classList.remove("hidden");
					}
				}
			}

			if (schoolSelect.value !== "all") {
				try {
					const url = new URL("/api/getSubSchools.json", window.location.origin);
					url.searchParams.append("school", schoolSelect.value);

					const response = await fetch(url);
					const schools = await response.json();

					schoolSelect.innerHTML = '<option value="all">All</option>';

					schools.forEach((school: string) => {
						const option = document.createElement("option");
						option.value = school;
						option.textContent = school;
						subSchoolSelect.appendChild(option);
					});

					if (urlParams.has("subSchool")) {
						subSchoolSelect.value = urlParams.get("subSchool")!;
					}
				} catch (error) {
					console.error("Error fetching subSchools:", error);
				}
			}

			form.addEventListener("change", async (event) => {
				const target = event.target! as HTMLSelectElement;
				const clearButton = document.getElementById(`clear-input-${target.name}`)! as HTMLButtonElement;

				if (target.value !== "all") {
					clearButton.classList.remove("hidden");
				} else {
					clearButton.classList.add("hidden");
				}

				if (target.name === "school") {
					subSchoolSelect.innerHTML = '<option value="all">All</option>';

					if (target.value !== "all") {
						try {
							const url = new URL("/api/getSubSchools.json", window.location.origin);
							url.searchParams.append("school", target.value);

							const response = await fetch(url);
							const subSchools = await response.json();

							subSchools.forEach((subSchool: string) => {
								const option = document.createElement("option");
								option.value = subSchool;
								option.textContent = subSchool;
								subSchoolSelect.appendChild(option);
							});
						} catch (error) {
							console.error("Error fetching subSchools:", error);
						}
					}
				}

				try {
					const url = new URL("/api/getFilteredMasters.json", window.location.origin);
					const formData = new FormData(form);

					url.search = "";

					for (const [key, value] of formData.entries()) {
						if (value !== "all") {
							url.searchParams.append(key, value.toString());
						}
					}

					if (url.searchParams.has("page")) {
						url.searchParams.delete("page");
					}

					const response = await fetch(url);
					const data = await response.json();

					resultFound.textContent = `(${data?.length ?? 0})`;
				} catch (error) {
					console.error(error);
				}
			});

			if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(navigator.userAgent)) {
				const filters = form.querySelectorAll("select");
				filters.forEach((filter) => {
					filter.addEventListener("change", () => {
						form.requestSubmit();
					});
				});
			}

			form.addEventListener("submit", async function (event) {
				event.preventDefault();
				try {
					const url = new URL(window.location.href);
					const formData = new FormData(form);

					for (const [key, value] of formData.entries()) {
						if (value !== "all") {
							url.searchParams.set(key, value.toString());
						} else {
							url.searchParams.delete(key);
						}
					}

					if (url.searchParams.has("page")) {
						url.searchParams.delete("page");
					}

					window.location.href = url.toString();
				} catch (error) {
					console.error(error);
				}
			});

			const clearButtons = form.querySelectorAll("button[id^='clear-input-']");
			clearButtons.forEach((button) => {
				button.addEventListener("click", (event) => {
					const inputId = button.id.replace("clear-input-", "");
					const input = form.elements.namedItem(inputId) as HTMLSelectElement;

					if (input) {
						input.value = "all";
						input.dispatchEvent(new Event("change"));

						if (inputId === "school") {
							if (subSchoolSelect) {
								subSchoolSelect.innerHTML = '<option value="all">All</option>';
							}
						}

						form.dispatchEvent(new Event("submit"));
					}
				});
			});
		}
	});
</script>
