---
import type { ShowMastersProps as Props } from "~/types";
import { getCollection, getEntries } from "astro:content";
import CardMasterAlt from "~/components/master/CardMasterAlt.astro";
import CardMaster from "~/components/master/CardMaster.astro";
import type { CollectionEntry } from "astro:content";
type Master = CollectionEntry<"masters">;

const { recent = false, featured = false, slugs = [], ui = "list" } = Astro.props;

let masters = [];

if (recent) {
    masters = await getCollection("masters", ({ data }) => !data.misc?.hidden);
    masters.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());
    masters = masters.slice(0, 3);
} else if (featured) {
	const allFeaturedMasters = await getCollection("masters", ({ data }) => data.misc?.featured && !data.misc?.hidden);
    masters = allFeaturedMasters.sort(() => 0.5 - Math.random()).slice(0, 3);
} else if (slugs.length > 0) {
	const references = slugs.map((slug) => ({ collection: "masters" as const, id: slug }));
    masters = await getEntries(references);
    masters = masters.filter((master): master is Master => master !== undefined && !master.data.misc?.hidden);
} else {
	return;
}

const wrapperClasses = {
	list: "grid grid-cols-1 gap-8",
	grid: "grid grid-cols-1 gap-8 lg:grid-cols-3",
};
---

<ul class={wrapperClasses[ui]}>
	{masters.map((master) => (ui === "grid" ? <CardMasterAlt master={master} /> : <CardMaster master={master} />))}
</ul>
